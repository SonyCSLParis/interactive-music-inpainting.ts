plugins: ["import"]

extends: [
        'eslint:recommended',
        'plugin:node/recommended'
    ]

env:
    browser: true,
    node: true

overrides: [{
    files: ["**/*.ts", "**/*.tsx"],
    parser:  '@typescript-eslint/parser',  # Specifies the ESLint parser
    extends:  [
        'plugin:@typescript-eslint/recommended'  # Uses the recommended rules from @typescript-eslint/eslint-plugin
    ],
    parserOptions: {
        ecmaVersion:  2021,  # Allows for the parsing of modern ECMAScript features
        sourceType:  'module',  # Allows for the use of imports
        ecmaFeatures: {
            jsx:  true,  # Allows for the parsing of JSX
        }
    }
}]

settings:
    node:
        resolvePaths: [
            __dirname, "/src/main", "/src/renderer"
        ]
        tryExtensions: [".js", ".jsx", ".json", ".node", ".ts", ".d.ts"]
        allowModules: ["electron", "fs-extra"]
    "import/parsers":
        "@typescript-eslint/parser":
            [".ts", ".tsx"]
    "import/resolver":
        node:
            extensions: [".js", ".jsx", ".ts", ".tsx", ".json", ".node"]
            moduleDirectory: ['node_modules', 'src/renderer', 'src/main']
        typescript:
            alwaysTryTypes: true, # always try to resolve types under `<root>@types` directory even it doesn't contain any source code, like `@types/unist`

            project: [
                "tsconfig.json",
                "src/main/tsconfig.json",
                "src/renderer/tsconfig.json"
            ]

rules:
    "node/no-unpublished-import": [
        "error", {
            allowModules: ["electron"]
        }
    ]
    "node/no-unsupported-features/es-syntax": [
        "error",
        {
            "ignores": [
                "modules"
            ]
        }
    ]

globals:
    __static: readonly
    __dirname: readonly
